plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group 'com.samjakob'
version '1.4.0-custom'
uri "https://github.com/SamJakob/SpiGUI"

java {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()

    maven {
        // Sonatype (for bungeecord-chat used by Spigot)
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
        // Spigot Nexus
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    // Spigot API
    compileOnly group: 'org.spigotmc', name: 'spigot-api', version: '1.8.8-R0.1-SNAPSHOT'
    testCompileOnly group: 'org.spigotmc', name: 'spigot-api', version: '1.8.8-R0.1-SNAPSHOT'
}

// Builds Spigot runnable plugin from the test package.
// Can be used to demonstrate and test functionality.
tasks.register('testJar', Jar) {
    from sourceSets.main.output.classesDirs
    from sourceSets.test.output.classesDirs
    from('src/test/resources') {
        include '**'
    }

    archiveBaseName.set("SpiGUITest")
}
//signing {
//    useGpgCmd()
//    sign publishing.publications.SpiGUI
//}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    source = sourceSets.main.java.sourceDirectories
    classpath += configurations.compileClasspath

    options.memberLevel = JavadocMemberLevel.PRIVATE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // Specify the components to publish
            from components.java
            //artifact sourcesJar
            //artifact javadocJar

            // Customize the artifact details
            groupId = 'com.samjakob'
            artifactId = 'SpiGUI'
            version = '1.4.0-custom'
        }
    }
    repositories {
        mavenLocal() // Publish to the local Maven repository (~/.m2/repository)
    }
}

// Task to generate source JAR (optional)
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}
